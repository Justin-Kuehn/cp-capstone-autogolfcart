/* Auto-generated by genmsg_cpp for file /home/dsalvado/ros/pmad/msg/Status.msg */
#ifndef PMAD_MESSAGE_STATUS_H
#define PMAD_MESSAGE_STATUS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace pmad
{
template <class ContainerAllocator>
struct Status_ : public ros::Message
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
  : analog_0(0)
  , analog_1(0)
  , analog_2(0)
  , analog_3(0)
  , digital_4(0)
  , digital_5(0)
  , digital_6(0)
  , digital_7(0)
  , pmad_command_count(0)
  {
  }

  Status_(const ContainerAllocator& _alloc)
  : analog_0(0)
  , analog_1(0)
  , analog_2(0)
  , analog_3(0)
  , digital_4(0)
  , digital_5(0)
  , digital_6(0)
  , digital_7(0)
  , pmad_command_count(0)
  {
  }

  typedef int32_t _analog_0_type;
  int32_t analog_0;

  typedef int32_t _analog_1_type;
  int32_t analog_1;

  typedef int32_t _analog_2_type;
  int32_t analog_2;

  typedef int32_t _analog_3_type;
  int32_t analog_3;

  typedef int32_t _digital_4_type;
  int32_t digital_4;

  typedef int32_t _digital_5_type;
  int32_t digital_5;

  typedef int32_t _digital_6_type;
  int32_t digital_6;

  typedef int32_t _digital_7_type;
  int32_t digital_7;

  typedef int32_t _pmad_command_count_type;
  int32_t pmad_command_count;


private:
  static const char* __s_getDataType_() { return "pmad/Status"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7d1b2debb1384c23a9ee7bf93637df60"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 analog_0\n\
int32 analog_1\n\
int32 analog_2\n\
int32 analog_3\n\
int32 digital_4\n\
int32 digital_5\n\
int32 digital_6\n\
int32 digital_7\n\
int32 pmad_command_count\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, analog_0);
    ros::serialization::serialize(stream, analog_1);
    ros::serialization::serialize(stream, analog_2);
    ros::serialization::serialize(stream, analog_3);
    ros::serialization::serialize(stream, digital_4);
    ros::serialization::serialize(stream, digital_5);
    ros::serialization::serialize(stream, digital_6);
    ros::serialization::serialize(stream, digital_7);
    ros::serialization::serialize(stream, pmad_command_count);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, analog_0);
    ros::serialization::deserialize(stream, analog_1);
    ros::serialization::deserialize(stream, analog_2);
    ros::serialization::deserialize(stream, analog_3);
    ros::serialization::deserialize(stream, digital_4);
    ros::serialization::deserialize(stream, digital_5);
    ros::serialization::deserialize(stream, digital_6);
    ros::serialization::deserialize(stream, digital_7);
    ros::serialization::deserialize(stream, pmad_command_count);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(analog_0);
    size += ros::serialization::serializationLength(analog_1);
    size += ros::serialization::serializationLength(analog_2);
    size += ros::serialization::serializationLength(analog_3);
    size += ros::serialization::serializationLength(digital_4);
    size += ros::serialization::serializationLength(digital_5);
    size += ros::serialization::serializationLength(digital_6);
    size += ros::serialization::serializationLength(digital_7);
    size += ros::serialization::serializationLength(pmad_command_count);
    return size;
  }

  typedef boost::shared_ptr< ::pmad::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pmad::Status_<ContainerAllocator>  const> ConstPtr;
}; // struct Status
typedef  ::pmad::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::pmad::Status> StatusPtr;
typedef boost::shared_ptr< ::pmad::Status const> StatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pmad::Status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pmad::Status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pmad

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::pmad::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d1b2debb1384c23a9ee7bf93637df60";
  }

  static const char* value(const  ::pmad::Status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d1b2debb1384c23ULL;
  static const uint64_t static_value2 = 0xa9ee7bf93637df60ULL;
};

template<class ContainerAllocator>
struct DataType< ::pmad::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pmad/Status";
  }

  static const char* value(const  ::pmad::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pmad::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 analog_0\n\
int32 analog_1\n\
int32 analog_2\n\
int32 analog_3\n\
int32 digital_4\n\
int32 digital_5\n\
int32 digital_6\n\
int32 digital_7\n\
int32 pmad_command_count\n\
";
  }

  static const char* value(const  ::pmad::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pmad::Status_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pmad::Status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.analog_0);
    stream.next(m.analog_1);
    stream.next(m.analog_2);
    stream.next(m.analog_3);
    stream.next(m.digital_4);
    stream.next(m.digital_5);
    stream.next(m.digital_6);
    stream.next(m.digital_7);
    stream.next(m.pmad_command_count);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pmad::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pmad::Status_<ContainerAllocator> & v) 
  {
    s << indent << "analog_0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.analog_0);
    s << indent << "analog_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.analog_1);
    s << indent << "analog_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.analog_2);
    s << indent << "analog_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.analog_3);
    s << indent << "digital_4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_4);
    s << indent << "digital_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_5);
    s << indent << "digital_6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_6);
    s << indent << "digital_7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_7);
    s << indent << "pmad_command_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pmad_command_count);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PMAD_MESSAGE_STATUS_H

