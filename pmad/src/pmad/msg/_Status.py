"""autogenerated by genmsg_py from Status.msg. Do not edit."""
import roslib.message
import struct


class Status(roslib.message.Message):
  _md5sum = "7d1b2debb1384c23a9ee7bf93637df60"
  _type = "pmad/Status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 analog_0
int32 analog_1
int32 analog_2
int32 analog_3
int32 digital_4
int32 digital_5
int32 digital_6
int32 digital_7
int32 pmad_command_count
"""
  __slots__ = ['analog_0','analog_1','analog_2','analog_3','digital_4','digital_5','digital_6','digital_7','pmad_command_count']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       analog_0,analog_1,analog_2,analog_3,digital_4,digital_5,digital_6,digital_7,pmad_command_count
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.analog_0 is None:
        self.analog_0 = 0
      if self.analog_1 is None:
        self.analog_1 = 0
      if self.analog_2 is None:
        self.analog_2 = 0
      if self.analog_3 is None:
        self.analog_3 = 0
      if self.digital_4 is None:
        self.digital_4 = 0
      if self.digital_5 is None:
        self.digital_5 = 0
      if self.digital_6 is None:
        self.digital_6 = 0
      if self.digital_7 is None:
        self.digital_7 = 0
      if self.pmad_command_count is None:
        self.pmad_command_count = 0
    else:
      self.analog_0 = 0
      self.analog_1 = 0
      self.analog_2 = 0
      self.analog_3 = 0
      self.digital_4 = 0
      self.digital_5 = 0
      self.digital_6 = 0
      self.digital_7 = 0
      self.pmad_command_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.analog_0, _x.analog_1, _x.analog_2, _x.analog_3, _x.digital_4, _x.digital_5, _x.digital_6, _x.digital_7, _x.pmad_command_count))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.analog_0, _x.analog_1, _x.analog_2, _x.analog_3, _x.digital_4, _x.digital_5, _x.digital_6, _x.digital_7, _x.pmad_command_count,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9i.pack(_x.analog_0, _x.analog_1, _x.analog_2, _x.analog_3, _x.digital_4, _x.digital_5, _x.digital_6, _x.digital_7, _x.pmad_command_count))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.analog_0, _x.analog_1, _x.analog_2, _x.analog_3, _x.digital_4, _x.digital_5, _x.digital_6, _x.digital_7, _x.pmad_command_count,) = _struct_9i.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9i = struct.Struct("<9i")
